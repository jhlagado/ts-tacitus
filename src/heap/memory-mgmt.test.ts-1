import { vm } from '../core/globalState';
import { initializeInterpreter } from '../core/globalState';
import { vectorCreate, vectorPush, vectorGet, vectorSet } from './vector';
import { toTaggedValue, CoreTag } from '../core/tagged';
import { decRef } from './heapUtils';
import { rangeSource } from '../seq/source';
import { seqMap } from '../seq/sequence';
import { executeProgram } from '../core/interpreter';

describe('Advanced Memory Management', () => {
  beforeEach(() => {
    initializeInterpreter();
  });

  it('should correctly cleanup multi-block vectors', () => {
    // Create a vector with enough elements to span multiple blocks
    const largeVector = vectorCreate(vm.heap);

    // Add ~500 elements (assuming this spans multiple blocks)
    for (let i = 0; i < 500; i++) {
      vectorPush(vm.heap, largeVector, toTaggedValue(i, false, CoreTag.NUMBER));
    }

    // Create objects to store in the vector
    const obj1 = vectorCreate(vm.heap);
    const obj2 = vectorCreate(vm.heap);

    // Store them at positions that should be in different blocks
    vectorSet(vm.heap, largeVector, 50, obj1);
    vectorSet(vm.heap, largeVector, 450, obj2);

    // Objects should have increased ref counts
    const obj1RefCount = vm.heap.getRefCount(obj1);
    const obj2RefCount = vm.heap.getRefCount(obj2);

    // Release the large vector - should release references to obj1 and obj2
    decRef(vm.heap, largeVector);

    // Objects should have decreased ref counts
    expect(vm.heap.getRefCount(obj1)).toBe(obj1RefCount - 1);
    expect(vm.heap.getRefCount(obj2)).toBe(obj2RefCount - 1);

    // Cleanup
    decRef(vm.heap, obj1);
    decRef(vm.heap, obj2);
  });

  it('should not leak memory with repeated operations', () => {
    // Get initial free heap size
    const initialFreeBlocks = vm.heap.getTotalFreeBlocks();

    // Create a function for mapping
    executeProgram('( 2 * )');
    const mapFunction = vm.pop();

    // Perform complex operations in a loop
    for (let i = 0; i < 50; i++) {
      const range = rangeSource(vm.heap, 0, 10, 1);
      const mapSeq = seqMap(vm.heap, range, mapFunction);

      // Use the sequence (create iterator, consume values)
      // ... Implement consumption here based on your API ...

      // Cleanup
      decRef(vm.heap, mapSeq);
      decRef(vm.heap, range);
    }

    // Cleanup function
    decRef(vm.heap, mapFunction);

    // Verify memory is properly reclaimed
    const finalFreeBlocks = vm.heap.getTotalFreeBlocks();
    expect(finalFreeBlocks).toBeCloseTo(initialFreeBlocks, -1); // Allow small variance
  });
});
