import { VM } from "../../vm";
import { Verb } from "../../types";

/**
 * Converts to integer
 * Float: Truncates decimal part.
 * Boolean: true → 1, false → 0.
 * String: Parses integer if valid, else error.
 * Array: Converts each element.
 */
export const intOp: Verb = (vm: VM) => {
  const a = vm.pop();
  if (vm.debug) console.log("intOp", a);
  // Implementation here
};

/**
 * Converts to floating point
 * Integer: Converts to float.
 * Boolean: true → 1.0, false → 0.0.
 * String: Parses float if valid, else error.
 * Array: Converts each element.
 */
export const floatOp: Verb = (vm: VM) => {
  const a = vm.pop();
  if (vm.debug) console.log("floatOp", a);
  // Implementation here
};

/**
 * Converts to character
 * Integer: Treats as ASCII/Unicode code.
 * String: No effect.
 * Array: Converts each element.
 */
export const charOp: Verb = (vm: VM) => {
  const a = vm.pop();
  if (vm.debug) console.log("charOp", a);
  // Implementation here
};

/**
 * Converts to interned symbol
 * String: Interns it.
 * Symbol: No effect.
 * Other types: Not applicable.
 */
export const symbolOp: Verb = (vm: VM) => {
  const a = vm.pop();
  if (vm.debug) console.log("symbolOp", a);
  // Implementation here
};

/**
 * Converts to date type
 * String: Parses as date.
 * Integer: Treats as epoch timestamp.
 * Array: Converts each element.
 */
export const dateOp: Verb = (vm: VM) => {
  const a = vm.pop();
  if (vm.debug) console.log("dateOp", a);
  // Implementation here
};

/**
 * Converts to time type
 * String: Parses as time.
 * Integer: Treats as seconds/milliseconds.
 * Array: Converts each element.
 */
export const timeOp: Verb = (vm: VM) => {
  const a = vm.pop();
  if (vm.debug) console.log("timeOp", a);
  // Implementation here
};

/**
 * Converts to a given type
 * First arg: Target type.
 * Second arg: Value to convert.
 * Supports: int, float, char, symbol, date, time, etc.
 */
export const castOp: Verb = (vm: VM) => {
  const targetType = vm.pop();
  const value = vm.pop();
  if (vm.debug) console.log("castOp", targetType, value);
  // Implementation here
};
