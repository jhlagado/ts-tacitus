/**
 * @file src/test/strings/symbol-table-direct-addressing.test.ts
 *
 * Tests for SymbolTable direct addressing extensions.
 * Verifies the new unified @symbol system methods work correctly
 * without breaking existing functionality.
 */

import { vm } from '../../core/globalState';
import { resetVM } from '../utils/test-utils';
import { SymbolTable } from '../../strings/symbol-table';
import { Digest } from '../../strings/digest';
import { Tag, fromTaggedValue } from '../../core/tagged';
import { Op } from '../../ops/opcodes';

describe('SymbolTable Direct Addressing', () => {
  let symbolTable: SymbolTable;
  let digest: Digest;

  beforeEach(() => {
    resetVM();
    digest = new Digest(vm.memory);
    symbolTable = new SymbolTable(digest);
  });

  describe('defineBuiltin method', () => {
    test('should define built-in operations with direct code references', () => {
      symbolTable.defineBuiltin('add', Op.Add);

      const taggedValue = symbolTable.findCodeRef('add');

      expect(taggedValue).toBeDefined();
      const { tag, value: addr } = fromTaggedValue(taggedValue!);
      expect(tag).toBe(Tag.BUILTIN);
      expect(addr).toBe(Op.Add);
    });

    test('should maintain backward compatibility with existing find method', () => {
      symbolTable.defineBuiltin('dup', Op.Dup);

      const functionIndex = symbolTable.find('dup');

      expect(functionIndex).toBe(Op.Dup);
    });

    test('should handle multiple built-in definitions', () => {
      const builtins = [
        { name: 'add', opcode: Op.Add },
        { name: 'dup', opcode: Op.Dup },
        { name: 'swap', opcode: Op.Swap },
        { name: 'drop', opcode: Op.Drop },
      ];

      builtins.forEach(({ name, opcode }) => {
        symbolTable.defineBuiltin(name, opcode);
      });

      builtins.forEach(({ name, opcode }) => {
        const taggedValue = symbolTable.findCodeRef(name);
        expect(codeRef).toBeDefined();
        expect(taggedValue!.tag).toBe(Tag.BUILTIN);
        expect(taggedValue!.addr).toBe(opcode);
      });
    });
  });

  describe('defineCode method', () => {
    test('should define colon definitions with direct code references', () => {
      const squareAddr = 1000;
      symbolTable.defineCode('square', squareAddr);

      const taggedValue = symbolTable.findCodeRef('square');

      expect(codeRef).toBeDefined();
      expect(taggedValue!.tag).toBe(Tag.FUNC);
      expect(taggedValue!.addr).toBe(squareAddr);
    });

    test('should maintain backward compatibility with existing find method', () => {
      const testAddr = 2000;
      symbolTable.defineCode('test', testAddr);

      const functionIndex = symbolTable.find('test');

      expect(functionIndex).toBe(testAddr);
    });

    test('should handle multiple code definitions', () => {
      const codeDefs = [
        { name: 'square', addr: 1000 },
        { name: 'cube', addr: 2000 },
        { name: 'factorial', addr: 3000 },
      ];

      codeDefs.forEach(({ name, addr }) => {
        symbolTable.defineCode(name, addr);
      });

      codeDefs.forEach(({ name, addr }) => {
        const taggedValue = symbolTable.findCodeRef(name);
        expect(codeRef).toBeDefined();
        expect(taggedValue!.tag).toBe(Tag.FUNC);
        expect(taggedValue!.addr).toBe(addr);
      });
    });
  });

  describe('findCodeRef method', () => {
    test('should return undefined for non-existent symbols', () => {
      const taggedValue = symbolTable.findCodeRef('nonexistent');

      expect(codeRef).toBeUndefined();
    });

    test('should distinguish between built-ins and code definitions', () => {
      symbolTable.defineBuiltin('add', Op.Add);
      symbolTable.defineCode('square', 1000);

      const addRef = symbolTable.findCodeRef('add');
      const squareRef = symbolTable.findCodeRef('square');

      expect(addRef!.tag).toBe(Tag.BUILTIN);
      expect(addRef!.addr).toBe(Op.Add);

      expect(squareRef!.tag).toBe(Tag.FUNC);
      expect(squareRef!.addr).toBe(1000);
    });

    test('should handle symbol shadowing correctly', () => {
      // Define a symbol, then redefine it
      symbolTable.defineBuiltin('test', Op.Add);
      symbolTable.defineCode('test', 5000); // Shadow with code definition

      const taggedValue = symbolTable.findCodeRef('test');

      // Should find the most recent definition (code definition)
      expect(taggedValue!.tag).toBe(Tag.FUNC);
      expect(taggedValue!.addr).toBe(5000);
    });
  });

  describe('mixed definitions', () => {
    test('should handle mixed built-ins and code definitions', () => {
      // Mix of built-ins and code definitions
      symbolTable.defineBuiltin('add', Op.Add);
      symbolTable.defineCode('square', 1000);
      symbolTable.defineBuiltin('dup', Op.Dup);
      symbolTable.defineCode('cube', 2000);

      // Verify all definitions are findable
      expect(symbolTable.findCodeRef('add')!.tag).toBe(Tag.BUILTIN);
      expect(symbolTable.findCodeRef('square')!.tag).toBe(Tag.FUNC);
      expect(symbolTable.findCodeRef('dup')!.tag).toBe(Tag.BUILTIN);
      expect(symbolTable.findCodeRef('cube')!.tag).toBe(Tag.FUNC);

      // Verify backward compatibility
      expect(symbolTable.find('add')).toBe(Op.Add);
      expect(symbolTable.find('square')).toBe(1000);
      expect(symbolTable.find('dup')).toBe(Op.Dup);
      expect(symbolTable.find('cube')).toBe(2000);
    });
  });

  describe('backward compatibility', () => {
    test('should not break existing define method', () => {
      // Use existing define method
      symbolTable.define('oldStyle', 42);

      // Should be findable with existing methods
      expect(symbolTable.find('oldStyle')).toBe(42);

      // Should not have code reference since it wasn't defined with new methods
      expect(symbolTable.findCodeRef('oldStyle')).toBeUndefined();
    });

    test('should not break existing defineCall method', () => {
      // Use existing defineCall method
      symbolTable.defineCall('oldCall', 99);

      // Should be findable with existing methods
      expect(symbolTable.find('oldCall')).toBe(99);

      // Should not have code reference since it wasn't defined with new methods
      expect(symbolTable.findCodeRef('oldCall')).toBeUndefined();
    });

    test('should work with checkpoint and revert', () => {
      symbolTable.defineBuiltin('add', Op.Add);
      const checkpoint = symbolTable.mark();

      symbolTable.defineCode('square', 1000);

      // Both should be findable
      expect(symbolTable.findCodeRef('add')).toBeDefined();
      expect(symbolTable.findCodeRef('square')).toBeDefined();

      // Revert to checkpoint
      symbolTable.revert(checkpoint);

      // Only 'add' should be findable now
      expect(symbolTable.findCodeRef('add')).toBeDefined();
      expect(symbolTable.findCodeRef('square')).toBeUndefined();
    });
  });
});
